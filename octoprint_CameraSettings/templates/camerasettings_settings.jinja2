{% macro menu_control(control_var, control_name) %}
<div class="control-group" data-bind="visible: controls.{{ control_var }}.use">
    <label class="control-label">{{ control_name }}</label>
    <div class="controls">
        <select
            data-bind="value: controls.{{ control_var }}.value,
                options: controls.{{ control_var }}.values,
                optionsText: (val) => val.desc, optionsValue: (val) => val.value" >
        </select>
    </div>
</div>
{% endmacro %}

{% macro bool_control(control_var, control_name) %}
<div class="control-group" data-bind="visible: controls.{{ control_var }}.use">
    <div class="controls">
        <label class="checkbox"><input data-bind="checked: controls.{{ control_var }}.value" type="checkbox"> {{ control_name }}</label>
    </div>
</div>
{% endmacro %}

{% macro slider_control(control_var, control_name) %}
<div class="control-group" data-bind="visible: controls.{{ control_var }}.use">
    <label class="control-label">{{ control_name }}</label>
    <div class="controls">
        <input
            class="span3"
            type="number"
            data-bind="value: controls.{{ control_var }}.value,
                attr: { min: controls.{{ control_var }}.min,
                    max: controls.{{ control_var }}.max,
                    step: controls.{{ control_var }}.step }">
        <input
            class="span6"
            type="range"
            data-bind="value: controls.{{ control_var }}.value,
                attr: { min: controls.{{ control_var }}.min,
                    max: controls.{{ control_var }}.max,
                    step: controls.{{ control_var }}.step }">
    </div>
</div>
{% endmacro %}

{% macro relative_control(control_var, control_name) %}
<div class="control-group" data-bind="visible: controls.{{ control_var }}.use">
    <label class="control-label">{{ control_name }}</label>
    <div class="controls">
        <button class="span2" data-bind="click: controls.{{ control_var }}.value(controls.{{control_var}}.min());">-100</button>
        <button class="span2" data-bind="click: controls.{{ control_var }}.value(controls.{{control_var}}.min() * 0.5);">-50</button>
        <button class="span2" data-bind="click: controls.{{ control_var }}.value(controls.{{control_var}}.min() * 0.1);">-10</button>
        <button class="span2" data-bind="click: controls.{{ control_var }}.value(controls.{{control_var}}.max() * 0.1);">+10</button>
        <button class="span2" data-bind="click: controls.{{ control_var }}.value(controls.{{control_var}}.max() * 0.5);">+50</button>
        <button class="span2" data-bind="click: controls.{{ control_var }}.value(controls.{{control_var}}.max());">+100</button>
    </div>
</div>
{% endmacro %}

{% macro button_control(control_var, control_name) %}
<div class="control-group" data-bind="visible: controls.{{ control_var }}.use">
    <label class="control-label">{{ control_name }}</label>
    <div class="controls">
        <button class="span4" data-bind="click: () => controls.{{ control_var }}.value(controls.{{ control_var }}.value() * -1)">{{ control_name }}</button>
    </div>
</div>
{% endmacro %}

<h3>Camera Settings</h3>
<div class="row-fluid">
    <div class="span8">
        <div class="camPreviewContainerOuter" data-bind="visible: settings.settings.plugins.camerasettings.show_preview">
            <div class="camPreviewContainer">
                <img data-bind="hidden: webcamHLS, attr: { src: cameraSrc }, style: { transform: `rotate(${cameraRot90() ? '-90deg': '0deg'}) scaleX(${cameraFlipH() ? -1: 1}) scaleY(${cameraFlipV() ? -1: 1})`}" class="camPreview">    
                <video id="camerasettings_preview_hls" autoplay="" muted="" controls="" data-bind="visible: webcamHLS, attr: { src: cameraSrc }, style: { transform: `rotate(${cameraRot90() ? '-90deg': '0deg'}) scaleX(${cameraFlipH() ? -1: 1}) scaleY(${cameraFlipV() ? -1: 1})`}" class="camPreview"></video>
            </div>
            
        </div>
    </div>
    <div class="span4">
        <div class="control-group">
            <label class="checkbox pull-right">
                <input type="checkbox" data-bind="checked: settings.settings.plugins.camerasettings.show_preview">Show Preview
            </label>
        </div>
        <div class="control-group">
            <select class="pull-right" id="camerasettings-device" data-bind="value: selectedDevice, options: cameras, optionsText: (camera) => camera.camera, optionsValue: (camera) => camera.device" ></select>
        </div>
        <div class="control-group">
            <button class="btn" data-bind="click: restoreDefaults">
                <i class="fas fa-undo"></i>
                <span>Restore Defaults</span>
            </button>
        </div>
    </div>
</div>
<div class="alert alert-error" data-bind="visible: showUnkControlsWarning">
    <strong>Warning:</strong> your camera has controls that have not been implemented yet. Please <a target="_blank" href="https://github.com/The-EG/OctoPrint-CameraSettings/issues/new?assignees=&labels=enhancement&template=missing-camera-controls.md&title=%5BFR%5D+Implement+Controls+for+%5BCamera+Name%5D">open an issue</a> and include the following information:
    <br><br>
    Camera Control Information: <button class="btn btn-primary" data-bind="click: copyUnkToClipboard"><i class="fas fa-copy"></i> Copy to Clipboard</button>
</div>

<hr/>

<div class="camMainSettings form-horizontal">
    {{ bool_control('horizontal_flip', 'Horizontal Flip') }}
    {{ bool_control('vertical_flip', 'Vertical Flip') }}
    {{ slider_control('rotate', 'Rotation') }}

    {{ menu_control('camera_orientation', 'Camera Orientation') }}

    {{ bool_control('image_stabilization', 'Image Stabilization') }}
    {{ menu_control('power_line_frequency', 'Power Line Frequency') }}

    {{ slider_control('vertical_blanking', 'Vertical Blanking') }}
    {{ slider_control('horizontal_blanking', 'Horizontal Blanking') }}

    {{ menu_control('scene_mode', 'Scene Mode') }}
    {{ slider_control('backlight_compensation', 'Backlight Compensation') }}
    {{ menu_control('auto_exposure', 'Auto Exposure') }}
    {{ menu_control('exposure_auto', 'Auto Exposure') }}
    {{ bool_control('exposure_auto_priority', 'Exposure Auto Priority') }}
    {{ menu_control('auto_exposure_bias', 'Auto Exposure Bias') }}
    {{ menu_control('exposure_metering_mode', 'Exposure Metering Mode') }}
    {{ bool_control('exposure_dynamic_framerate', 'Exposure Dynamic Framerate') }}
    {{ slider_control('exposure_time_absolute', 'Exposure Time Absolute') }}
    {{ slider_control('exposure_absolute', 'Exposure Time Absolute') }}
    {{ slider_control('sensor_mode', 'Sensor Mode') }}
    {{ slider_control('frame_rate', 'Frame Rate') }}
    {{ menu_control('iso_sensitivity_auto', 'ISO Sensitivity Auto') }}
    {{ menu_control('iso_sensitivity', 'ISO Sensitivity') }}
    {{ slider_control('gain', 'Gain') }}
    {{ slider_control('analogue_gain', 'Analogue Gain') }}
    {{ slider_control('digital_gain', 'Digital Gain') }}
    {{ slider_control('red_pixel_value', 'Red Pixel Value') }}
    {{ slider_control('green_red_pixel_value', 'Green Red Pixel Value') }}
    {{ slider_control('blue_pixel_value', 'Blue Pixel Value') }}
    {{ slider_control('green_blue_pixel_value', 'Green Blue Pixel Value') }}

    {{ bool_control('focus_auto', 'Focus Auto') }}
    {{ bool_control('focus_automatic_continuous', 'Focus Automatic Continuous') }}
    {{ slider_control('focus_absolute', 'Focus Absolute') }}
    {{ slider_control('focus', 'Focus') }}
    {{ slider_control('zoom_absolute', 'Zoom Absolute') }}
    {{ slider_control('zoom_continuous', 'Zoom Continuous') }}
    {{ slider_control('tilt_absolute', 'Tilt Absolute') }}
    {{ slider_control('tilt_speed', 'Tilt Absolute') }}
    {{ slider_control('pan_absolute', 'Pan Absolute') }}
    {{ slider_control('pan_speed', 'Pan Absolute') }}
    {{ relative_control('pan_relative', 'Pan Relative') }}
    {{ button_control('pan_reset', 'Pan Reset') }}
    {{ relative_control('tilt_relative', 'Tilt Relative') }}
    {{ button_control('tilt_reset', 'Tilt Reset') }}

    {{ slider_control('sharpness', 'Sharpness') }}
    {{ slider_control('brightness', 'Brightness') }}
    {{ slider_control('contrast', 'Contrast') }}
    {{ slider_control('saturation', 'Saturation') }}

    {{ bool_control('hue_automatic', 'Automatic Hue') }}

    {{ menu_control('color_effects', 'Color Effects') }}
    {{ slider_control('color_effects_cbcr', 'Color Effects CB/CR') }}
    {{ menu_control('white_balance_auto_preset', 'White Balance') }}
    {{ bool_control('white_balance_temperature_auto', 'White Balance Auto') }}
    {{ bool_control('white_balance_component_auto', 'White Balance Component Auto') }}
    {{ slider_control('white_balance_temperature', 'White Balance Temperature') }}
    {{ slider_control('auto_white_balance_speed', 'Auto White Balance Speed') }}
    {{ slider_control('auto_white_balance_delay', 'Auto White Balance Delay') }}
    {{ slider_control('blue_balance', 'Blue Balance') }}
    {{ slider_control('red_balance', 'Red Balance') }}
    {{ slider_control('white_balance_blue_component', 'Blue Balance') }}
    {{ slider_control('white_balance_red_component', 'Red Balance') }}
    {{ bool_control('hue_auto', 'Hue Auto') }}
    {{ slider_control('hue', 'Hue') }}
    {{ slider_control('gamma', 'Gamma') }}

    {{ bool_control('auto_contour', 'Auto Contour') }}
    {{ slider_control('contour', 'Contour') }}

    {{ slider_control('dynamic_noise_reduction', 'Dynamic Noise Reduction') }}

    {{ slider_control('compression_quality', 'Compression Quality') }}

    {{ menu_control('video_bitrate_mode', 'Video Bitrate Mode') }}
    {{ slider_control('video_bitrate', 'Video Bitrate') }}
    {{ slider_control('pixel_rate', 'Pixel Rate') }}

    {{ bool_control('repeat_sequence_header', 'Repeat Sequence Header') }}
    {{ slider_control('h264_i_frame_period', 'H.264 I-Frame Period')}}
    {{ slider_control('h264_minimum_qp_value', 'H.264 Min. QP Value')}}
    {{ slider_control('h264_maximum_qp_value', 'H.264 Max. QP Value')}}
    {{ menu_control('h264_level', 'H.264 Level') }}
    {{ menu_control('h264_profile', 'H.264 Profile') }}
    {{ menu_control('h264_decode_mode', 'H.264 Decode Mode') }}
    {{ menu_control('h264_start_code', 'H.264 Start Code') }}

    {{ menu_control('hevc_decode_mode', 'HEVC Decode Mode') }}
    {{ menu_control('hevc_start_code', 'HEVC Start Code') }}

    {{ bool_control('privacy', 'Privacy Shield is down') }}
    {{ bool_control('group_hold', 'Group Hold') }}

    {{ menu_control('led1_mode', 'LED Mode') }}
    {{ slider_control('led1_frequency', 'LED Blink Frequency') }}

    {{ slider_control('raw_bits_per_pixel', 'Raw Bits Per Pixel') }}

    {{ slider_control('min_number_of_capture_buffers', 'Min. Number of Capture Buffers') }}

    {{ slider_control('frame_rate', 'Frame Rate') }}

    {{ bool_control('disable_video_processing', 'Disable Video Processing') }}

    {{ bool_control('band_stop_filter', 'Band Stop Filter') }}

    {{ slider_control('iris_absolute', 'Iris Absolute') }}
    {{ relative_control('iris_relative', 'Iris Relative') }}

    {{ menu_control('test_pattern', 'Test Pattern') }}

    {{ menu_control('link_frequency', 'Link Frequency') }}

    {{ button_control('save_user_settings', 'Save User Settings') }}
    {{ button_control('restore_user_settings', 'Restore User Settings') }}
    {{ button_control('restore_factory_settings', 'Restore Factory Settings') }}
</div>
<hr>

<div class="alert alert-info">
    <strong>Note:</strong> these settings will not be saved unless you click 'Save' below.
</div>

<div class="row-fluid">
    <div class="span4 text-right">Preset</div>
    <div class="span5">
        <input data-bind="value: presetName"></input>
    </div>
    <div class="span3">
        <button style="width: 50%;" class="btn" data-bind="enable: presetName() !== undefined, click: savePreset"><i class="fas fa-download"></i></button>
    </div>
</div>
<div class="row-fluid">
    <div class="span4 text-right">
        &nbsp;
    </div>
    <div class="span5">
        <select size="3" data-bind="options: settings.settings.plugins.camerasettings.presets, optionsText: (preset) => preset.name, optionsValue: (preset) => preset.name, value: presetListName "></select>
    </div>
    <div class="span3">
        <div><button style="width: 50%;" class="btn" data-bind="enable: presetListName() !== undefined, click: loadPreset"><i class="fas fa-upload"></i></button></div>
        <div><button style="width: 50%;" class="btn" data-bind="enable: presetListName() !== undefined, click: deletePreset"><i class="fas fa-trash"></i></button></div>
    </div>
</div>

<div class="row-fluid">
    <div class="span4 text-right">Load Preset on OctoPrint Startup</div>
    <div class="span4">
        <input type="checkbox" class="checkbox" data-bind="checked: settings.settings.plugins.camerasettings.load_preset_on_startup"></input>
    </div>
</div>
<div class="row-fluid">
    <div class="span4 text-right">Startup Preset</div>
    <div class="span4">
        <select data-bind="
            enable: settings.settings.plugins.camerasettings.load_preset_on_startup,
            options: settings.settings.plugins.camerasettings.presets,
            optionsText: (preset) => preset.name,
            optionsValue: (preset) => preset.name,
            value: settings.settings.plugins.camerasettings.startup_preset_name "></select>
    </div>
</div>
<div class="row-fluid">
    <div class="span4 text-right">Startup Preset Apply Count</div>
    <div class="span4">
        <input type="number" data-bind="value: settings.settings.plugins.camerasettings.startup_preset_apply_count">
    </div>
</div>
<hr>
<div class="row-fluid">
    <div class="span4 text-right">OctoPrint-MultiCam Integration</div>
    <div class="span4">
        <input type="checkbox" class="checkbox" data-bind="checked: settings.settings.plugins.camerasettings.multicam_support, enable: settings.settings.plugins.multicam !== undefined">
    </div>
</div>


<div data-bind="foreach: {data: settings.settings.plugins.camerasettings.multicam_mapping, as: 'mapping', noChildContext: true}, visible: settings.settings.plugins.multicam !== undefined">

<div class="row-fluid">
    <div class="span4 text-right" data-bind="text: mapping.camera"></div>
    <div class="span4">
        <select data-bind=",
            options: settings.settings.plugins.multicam!==undefined ? settings.settings.plugins.multicam.multicam_profiles : [],
            optionsText: (profile) => profile.name,
            optionsValue: (profile) => profile.name,
            value: mapping.multicam,
            valueAllowUnset: true "></select>
    </div>
</div>

</div>